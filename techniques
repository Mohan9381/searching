1.BINARY SEARCH

package searchingtech;

public class binarysearch {
	 public static void binarySearch(int arr[], int first, int last, int key){  
		   int mid = (first + last)/2;  
		   while( first <= last ){  
		      if ( arr[mid] < key ){  
		        first = mid + 1;     
		      }else if ( arr[mid] == key ){  
		        System.out.println("Element is found at index: " + mid);  
		        break;  
		      }else{  
		         last = mid - 1;  
		      }  
		      mid = (first + last)/2;  
		   }  
		   if ( first > last ){  
		      System.out.println("Element is not found!");  
		   }  
		 }  
		 public static void main(String args[]){  
		        int arr[] = {10,20,30,40,50};  
		        int key = 30;  
		        int last=arr.length-1;  
		        binarySearch(arr,0,last,key);     
		 }  
		} 


2. BUBBLE SORT


package searchingtech;

public class bubblesort {
	 static void bubbleSort(int[] arr) {  
	        int n = arr.length;  
	        int temp = 0;  
	         for(int i=0; i < n; i++){  
	                 for(int j=1; j < (n-i); j++){  
	                          if(arr[j-1] > arr[j]){  
	                                 temp = arr[j-1];  
	                                 arr[j-1] = arr[j];  
	                                 arr[j] = temp;  
	                         }  
	                          
	                 }  
	         }  
	  
	    }  
	    public static void main(String[] args) {  
	                int arr[] ={3,60,35,2,45,320,5};  
	                 
	                System.out.println("Array Before Bubble Sort");  
	                for(int i=0; i < arr.length; i++){  
	                        System.out.print(arr[i] + " ");  
	                }  
	                System.out.println();  
	                  
	                bubbleSort(arr); 
	                 
	                System.out.println("Array After Bubble Sort");  
	                for(int i=0; i < arr.length; i++){  
	                        System.out.print(arr[i] + " ");  
	                }  
	   
	        }  

}


3. EXPONENTIAL

package searchingtech;
import java.util.Arrays;
public class exponentialsearch {
	static int exponentialSearch(int arr[],int n, int x)
{
if (arr[0] == x)
return 0;

int i = 1;
while (i < n && arr[i] <= x)
i = i*2;

return Arrays.binarySearch(arr, i/2,Math.min(i, n-1), x);
}

public static void main(String args[])
{
int arr[] = {2, 3, 4, 10, 40};
int x = 10;
int result = exponentialSearch(arr,arr.length, x);

System.out.println((result < 0) ?"Element is not present in array" :"Element is present at index " +result);
}
}


4.INSERTIONSORT

package searchingtech;

public class insertionsort {
	public static void insertionSort(int array[]) {  
        int n = array.length;  
        for (int j = 1; j < n; j++) {  
            int key = array[j];  
            int i = j-1;  
            while ( (i > -1) && ( array [i] > key ) ) {  
                array [i+1] = array [i];  
                i--;  
            }  
            array[i+1] = key;  
        }  
    }  
       
    public static void main(String a[]){    
        int[] arr1 = {9,14,3,2,43,11,58,22};    
        System.out.println("Before Insertion Sort");    
        for(int i:arr1){    
            System.out.print(i+" ");    
        }    
        System.out.println();    
            
        insertionSort(arr1);    
           
        System.out.println("After Insertion Sort");    
        for(int i:arr1){    
            System.out.print(i+" ");    
        }    
    }    

}


5.LINEAR SEARCH

package searchingtech;

public class linearsearch {
	public static int linearSearchexample(int[] arr, int key){    
        for(int i=0;i<arr.length;i++){    
            if(arr[i] == key){    
                return i;    
            }    
        }    
        return -1;    
    }    
    public static void main(String a[]){    
        int[] a1= {10,20,30,40,50,60};    
        int key = 50;    
        System.out.println(key+" is found at index: "+linearSearchexample(a1, key));    
    }    
}    


6.MERGESORT

package searchingtech;

public class mergesort {
	void merge(int a[], int beg, int mid, int end)    
	{    
	    int i, j, k;  
	    int n1 = mid - beg + 1;    
	    int n2 = end - mid;    
	      
	        int LeftArray[] = new int[n1];  
	        int RightArray[] = new int[n2];  
	      
	    for (i = 0; i < n1; i++)    
	    LeftArray[i] = a[beg + i];    
	    for (j = 0; j < n2; j++)    
	    RightArray[j] = a[mid + 1 + j];    
	      
	    i = 0; 
	    j = 0; 
	    k = beg; 
	      
	    while (i < n1 && j < n2)    
	    {    
	        if(LeftArray[i] <= RightArray[j])    
	        {    
	            a[k] = LeftArray[i];    
	            i++;    
	        }    
	        else    
	        {    
	            a[k] = RightArray[j];    
	            j++;    
	        }    
	        k++;    
	    }    
	    while (i<n1)    
	    {    
	        a[k] = LeftArray[i];    
	        i++;    
	        k++;    
	    }    
	      
	    while (j<n2)    
	    {    
	        a[k] = RightArray[j];    
	        j++;    
	        k++;    
	    }    
	}    
	  
	void mergeSort(int a[], int beg, int end)  
	{  
	    if (beg < end)   
	    {  
	        int mid = (beg + end) / 2;  
	        mergeSort(a, beg, mid);  
	        mergeSort(a, mid + 1, end);  
	        merge(a, beg, mid, end);  
	    }  
	}  
	  
	
	void printArray(int a[], int n)  
	{  
	    int i;  
	    for (i = 0; i < n; i++)  
	        System.out.print(a[i] + " ");  
	}  
	  
	public static void main(String args[])  
	{  
	    int a[] = { 11, 30, 24, 7, 31, 16, 39, 41 };  
	    int n = a.length;  
	    mergesort m1 = new mergesort();  
	    System.out.println("\nBefore sorting array elements are - ");  
	    m1.printArray(a, n);  
	    m1.mergeSort(a, 0, n - 1);  
	    System.out.println("\nAfter sorting array elements are - ");  
	    m1.printArray(a, n);  
	    System.out.println("");  
	}  
	  
	  }



7.
QUICK SORT

package searchingtech;

public class quicksort {
	int partition (int a[], int start, int end)  
	{  
	    int pivot = a[end]; // pivot element  
	    int i = (start - 1);  
	  
	    for (int j = start; j <= end - 1; j++)  
	    {  
	        if (a[j] < pivot)  
	        {  
	            i++; 
	            int t = a[i];  
	            a[i] = a[j];  
	            a[j] = t;  
	        }  
	    }  
	    int t = a[i+1];  
	    a[i+1] = a[end];  
	    a[end] = t;  
	    return (i + 1);  
	}  
	  
	void quick(int a[], int start, int end) 	{  
	    if (start < end)  
	    {  
	        int p = partition(a, start, end);  
	        quick(a, start, p - 1);  
	        quick(a, p + 1, end);  
	    }  
	}  
	  
	void printArr(int a[], int n)  
	{  
	    int i;  
	    for (i = 0; i < n; i++)  
	        System.out.print(a[i] + " ");  
	}  
	    public static void main(String[] args) {  
	    int a[] = { 13, 18, 27, 2, 19, 25 };  
	    int n = a.length;  
	    System.out.println("\nBefore sorting array elements are - ");  
	    quicksort q1 = new quicksort();  
	    q1.printArr(a, n);  
	    q1.quick(a, 0, n - 1);  
	    System.out.println("\nAfter sorting array elements are - ");  
	    q1.printArr(a, n);  
	    System.out.println();  
	    }  
	}  



8.SELECTION SORT


package searchingtech;

public class selectionsort {
	 public static void selectionSort(int[] arr){  
	        for (int i = 0; i < arr.length - 1; i++)  
	        {  
	            int index = i;  
	            for (int j = i + 1; j < arr.length; j++){  
	                if (arr[j] < arr[index]){  
	                    index = j;
	                }  
	            }  
	            int smallerNumber = arr[index];   
	            arr[index] = arr[i];  
	            arr[i] = smallerNumber;  
	        }  
	    }  
	       
	    public static void main(String a[]){  
	        int[] arr1 = {9,14,3,2,43,11,58,22};  
	        System.out.println("Before Selection Sort");  
	        for(int i:arr1){  
	            System.out.print(i+" ");  
	        }  
	        System.out.println();  
	          
	        selectionSort(arr1);
	         
	        System.out.println("After Selection Sort");  
	        for(int i:arr1){  
	            System.out.print(i+" ");  
	        }  
	    }

}



